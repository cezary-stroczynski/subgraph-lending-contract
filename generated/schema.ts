// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Loan extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("agreements", Value.fromBytesArray(new Array(0)));
    this.set("repayments", Value.fromStringArray(new Array(0)));
    this.set("loanIncreasings", Value.fromStringArray(new Array(0)));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Loan entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Loan entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Loan", id.toString(), this);
    }
  }

  static load(id: string): Loan | null {
    return changetype<Loan | null>(store.get("Loan", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get agreements(): Array<Bytes> {
    let value = this.get("agreements");
    return value!.toBytesArray();
  }

  set agreements(value: Array<Bytes>) {
    this.set("agreements", Value.fromBytesArray(value));
  }

  get repayments(): Array<string> {
    let value = this.get("repayments");
    return value!.toStringArray();
  }

  set repayments(value: Array<string>) {
    this.set("repayments", Value.fromStringArray(value));
  }

  get loanIncreasings(): Array<string> {
    let value = this.get("loanIncreasings");
    return value!.toStringArray();
  }

  set loanIncreasings(value: Array<string>) {
    this.set("loanIncreasings", Value.fromStringArray(value));
  }
}

export class Repayment extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("amount", Value.fromI32(0));
    this.set("agreement", Value.fromBytes(Bytes.empty()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Repayment entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Repayment entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Repayment", id.toString(), this);
    }
  }

  static load(id: string): Repayment | null {
    return changetype<Repayment | null>(store.get("Repayment", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get amount(): i32 {
    let value = this.get("amount");
    return value!.toI32();
  }

  set amount(value: i32) {
    this.set("amount", Value.fromI32(value));
  }

  get agreement(): Bytes {
    let value = this.get("agreement");
    return value!.toBytes();
  }

  set agreement(value: Bytes) {
    this.set("agreement", Value.fromBytes(value));
  }
}

export class LoanIncreased extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("amount", Value.fromI32(0));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save LoanIncreased entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save LoanIncreased entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("LoanIncreased", id.toString(), this);
    }
  }

  static load(id: string): LoanIncreased | null {
    return changetype<LoanIncreased | null>(store.get("LoanIncreased", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get amount(): i32 {
    let value = this.get("amount");
    return value!.toI32();
  }

  set amount(value: i32) {
    this.set("amount", Value.fromI32(value));
  }
}

export class Whitelist extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("members", Value.fromBytesArray(new Array(0)));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Whitelist entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Whitelist entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Whitelist", id.toString(), this);
    }
  }

  static load(id: string): Whitelist | null {
    return changetype<Whitelist | null>(store.get("Whitelist", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get members(): Array<Bytes> {
    let value = this.get("members");
    return value!.toBytesArray();
  }

  set members(value: Array<Bytes>) {
    this.set("members", Value.fromBytesArray(value));
  }
}
