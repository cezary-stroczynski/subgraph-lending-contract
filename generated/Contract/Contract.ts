// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class AddedToWhitelist extends ethereum.Event {
  get params(): AddedToWhitelist__Params {
    return new AddedToWhitelist__Params(this);
  }
}

export class AddedToWhitelist__Params {
  _event: AddedToWhitelist;

  constructor(event: AddedToWhitelist) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class LoanCreated extends ethereum.Event {
  get params(): LoanCreated__Params {
    return new LoanCreated__Params(this);
  }
}

export class LoanCreated__Params {
  _event: LoanCreated;

  constructor(event: LoanCreated) {
    this._event = event;
  }

  get id(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get agreements(): Array<Address> {
    return this._event.parameters[1].value.toAddressArray();
  }
}

export class LoanIncreased extends ethereum.Event {
  get params(): LoanIncreased__Params {
    return new LoanIncreased__Params(this);
  }
}

export class LoanIncreased__Params {
  _event: LoanIncreased;

  constructor(event: LoanIncreased) {
    this._event = event;
  }

  get id(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class RemovedFromWhitelist extends ethereum.Event {
  get params(): RemovedFromWhitelist__Params {
    return new RemovedFromWhitelist__Params(this);
  }
}

export class RemovedFromWhitelist__Params {
  _event: RemovedFromWhitelist;

  constructor(event: RemovedFromWhitelist) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Repayment extends ethereum.Event {
  get params(): Repayment__Params {
    return new Repayment__Params(this);
  }
}

export class Repayment__Params {
  _event: Repayment;

  constructor(event: Repayment) {
    this._event = event;
  }

  get id(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get agreement(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class Contract__getOutstandingDebtResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }
}

export class Contract__loansResult {
  value0: Address;
  value1: Address;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;
  value5: BigInt;
  value6: BigInt;

  constructor(
    value0: Address,
    value1: Address,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt,
    value5: BigInt,
    value6: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigInt(this.value6));
    return map;
  }
}

export class Contract extends ethereum.SmartContract {
  static bind(address: Address): Contract {
    return new Contract("Contract", address);
  }

  agreementLoans(borrower: Address, agreement: Address): BigInt {
    let result = super.call(
      "agreementLoans",
      "agreementLoans(address,address):(uint256)",
      [
        ethereum.Value.fromAddress(borrower),
        ethereum.Value.fromAddress(agreement)
      ]
    );

    return result[0].toBigInt();
  }

  try_agreementLoans(
    borrower: Address,
    agreement: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "agreementLoans",
      "agreementLoans(address,address):(uint256)",
      [
        ethereum.Value.fromAddress(borrower),
        ethereum.Value.fromAddress(agreement)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getOutstandingDebt(loanId: BigInt): Contract__getOutstandingDebtResult {
    let result = super.call(
      "getOutstandingDebt",
      "getOutstandingDebt(uint256):(uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(loanId)]
    );

    return new Contract__getOutstandingDebtResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_getOutstandingDebt(
    loanId: BigInt
  ): ethereum.CallResult<Contract__getOutstandingDebtResult> {
    let result = super.tryCall(
      "getOutstandingDebt",
      "getOutstandingDebt(uint256):(uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(loanId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Contract__getOutstandingDebtResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }

  interestDecimal(): BigInt {
    let result = super.call(
      "interestDecimal",
      "interestDecimal():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_interestDecimal(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "interestDecimal",
      "interestDecimal():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  isCollateral(borrower: Address, agreement: Address): boolean {
    let result = super.call(
      "isCollateral",
      "isCollateral(address,address):(bool)",
      [
        ethereum.Value.fromAddress(borrower),
        ethereum.Value.fromAddress(agreement)
      ]
    );

    return result[0].toBoolean();
  }

  try_isCollateral(
    borrower: Address,
    agreement: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isCollateral",
      "isCollateral(address,address):(bool)",
      [
        ethereum.Value.fromAddress(borrower),
        ethereum.Value.fromAddress(agreement)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isWhitelisted(_address: Address): boolean {
    let result = super.call("isWhitelisted", "isWhitelisted(address):(bool)", [
      ethereum.Value.fromAddress(_address)
    ]);

    return result[0].toBoolean();
  }

  try_isWhitelisted(_address: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isWhitelisted",
      "isWhitelisted(address):(bool)",
      [ethereum.Value.fromAddress(_address)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  loans(param0: BigInt): Contract__loansResult {
    let result = super.call(
      "loans",
      "loans(uint256):(address,address,uint256,uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new Contract__loansResult(
      result[0].toAddress(),
      result[1].toAddress(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toBigInt(),
      result[6].toBigInt()
    );
  }

  try_loans(param0: BigInt): ethereum.CallResult<Contract__loansResult> {
    let result = super.tryCall(
      "loans",
      "loans(uint256):(address,address,uint256,uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Contract__loansResult(
        value[0].toAddress(),
        value[1].toAddress(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toBigInt(),
        value[6].toBigInt()
      )
    );
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  token(): Address {
    let result = super.call("token", "token():(address)", []);

    return result[0].toAddress();
  }

  try_token(): ethereum.CallResult<Address> {
    let result = super.tryCall("token", "token():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AddCall extends ethereum.Call {
  get inputs(): AddCall__Inputs {
    return new AddCall__Inputs(this);
  }

  get outputs(): AddCall__Outputs {
    return new AddCall__Outputs(this);
  }
}

export class AddCall__Inputs {
  _call: AddCall;

  constructor(call: AddCall) {
    this._call = call;
  }

  get _address(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class AddCall__Outputs {
  _call: AddCall;

  constructor(call: AddCall) {
    this._call = call;
  }
}

export class ApproveIncreaseLoanCall extends ethereum.Call {
  get inputs(): ApproveIncreaseLoanCall__Inputs {
    return new ApproveIncreaseLoanCall__Inputs(this);
  }

  get outputs(): ApproveIncreaseLoanCall__Outputs {
    return new ApproveIncreaseLoanCall__Outputs(this);
  }
}

export class ApproveIncreaseLoanCall__Inputs {
  _call: ApproveIncreaseLoanCall;

  constructor(call: ApproveIncreaseLoanCall) {
    this._call = call;
  }

  get loanId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveIncreaseLoanCall__Outputs {
  _call: ApproveIncreaseLoanCall;

  constructor(call: ApproveIncreaseLoanCall) {
    this._call = call;
  }
}

export class ApproveLoanCall extends ethereum.Call {
  get inputs(): ApproveLoanCall__Inputs {
    return new ApproveLoanCall__Inputs(this);
  }

  get outputs(): ApproveLoanCall__Outputs {
    return new ApproveLoanCall__Outputs(this);
  }
}

export class ApproveLoanCall__Inputs {
  _call: ApproveLoanCall;

  constructor(call: ApproveLoanCall) {
    this._call = call;
  }

  get agreements(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }

  get borrower(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get lender(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get interestRate(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class ApproveLoanCall__Outputs {
  _call: ApproveLoanCall;

  constructor(call: ApproveLoanCall) {
    this._call = call;
  }
}

export class RemoveCall extends ethereum.Call {
  get inputs(): RemoveCall__Inputs {
    return new RemoveCall__Inputs(this);
  }

  get outputs(): RemoveCall__Outputs {
    return new RemoveCall__Outputs(this);
  }
}

export class RemoveCall__Inputs {
  _call: RemoveCall;

  constructor(call: RemoveCall) {
    this._call = call;
  }

  get _address(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RemoveCall__Outputs {
  _call: RemoveCall;

  constructor(call: RemoveCall) {
    this._call = call;
  }
}

export class RepayCall extends ethereum.Call {
  get inputs(): RepayCall__Inputs {
    return new RepayCall__Inputs(this);
  }

  get outputs(): RepayCall__Outputs {
    return new RepayCall__Outputs(this);
  }
}

export class RepayCall__Inputs {
  _call: RepayCall;

  constructor(call: RepayCall) {
    this._call = call;
  }

  get loanId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get repayment(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class RepayCall__Outputs {
  _call: RepayCall;

  constructor(call: RepayCall) {
    this._call = call;
  }
}

export class TransferCall extends ethereum.Call {
  get inputs(): TransferCall__Inputs {
    return new TransferCall__Inputs(this);
  }

  get outputs(): TransferCall__Outputs {
    return new TransferCall__Outputs(this);
  }
}

export class TransferCall__Inputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get agreement(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferCall__Outputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}
